// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: internal/proto/service_gRPC.proto

package todo_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TodoItem_GetTasks_FullMethodName         = "/proto.TodoItem/GetTasks"
	TodoItem_UpdateTaskStatus_FullMethodName = "/proto.TodoItem/UpdateTaskStatus"
)

// TodoItemClient is the client API for TodoItem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoItemClient interface {
	GetTasks(ctx context.Context, in *GetTasksRequest, opts ...grpc.CallOption) (*GetTasksResponse, error)
	UpdateTaskStatus(ctx context.Context, in *GetTasksRequest, opts ...grpc.CallOption) (*UpdateTaskStatusResponse, error)
}

type todoItemClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoItemClient(cc grpc.ClientConnInterface) TodoItemClient {
	return &todoItemClient{cc}
}

func (c *todoItemClient) GetTasks(ctx context.Context, in *GetTasksRequest, opts ...grpc.CallOption) (*GetTasksResponse, error) {
	out := new(GetTasksResponse)
	err := c.cc.Invoke(ctx, TodoItem_GetTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoItemClient) UpdateTaskStatus(ctx context.Context, in *GetTasksRequest, opts ...grpc.CallOption) (*UpdateTaskStatusResponse, error) {
	out := new(UpdateTaskStatusResponse)
	err := c.cc.Invoke(ctx, TodoItem_UpdateTaskStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoItemServer is the server API for TodoItem service.
// All implementations must embed UnimplementedTodoItemServer
// for forward compatibility
type TodoItemServer interface {
	GetTasks(context.Context, *GetTasksRequest) (*GetTasksResponse, error)
	UpdateTaskStatus(context.Context, *GetTasksRequest) (*UpdateTaskStatusResponse, error)
	mustEmbedUnimplementedTodoItemServer()
}

// UnimplementedTodoItemServer must be embedded to have forward compatible implementations.
type UnimplementedTodoItemServer struct {
}

func (UnimplementedTodoItemServer) GetTasks(context.Context, *GetTasksRequest) (*GetTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasks not implemented")
}
func (UnimplementedTodoItemServer) UpdateTaskStatus(context.Context, *GetTasksRequest) (*UpdateTaskStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskStatus not implemented")
}
func (UnimplementedTodoItemServer) mustEmbedUnimplementedTodoItemServer() {}

// UnsafeTodoItemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoItemServer will
// result in compilation errors.
type UnsafeTodoItemServer interface {
	mustEmbedUnimplementedTodoItemServer()
}

func RegisterTodoItemServer(s grpc.ServiceRegistrar, srv TodoItemServer) {
	s.RegisterService(&TodoItem_ServiceDesc, srv)
}

func _TodoItem_GetTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoItemServer).GetTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoItem_GetTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoItemServer).GetTasks(ctx, req.(*GetTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoItem_UpdateTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoItemServer).UpdateTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoItem_UpdateTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoItemServer).UpdateTaskStatus(ctx, req.(*GetTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TodoItem_ServiceDesc is the grpc.ServiceDesc for TodoItem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoItem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TodoItem",
	HandlerType: (*TodoItemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTasks",
			Handler:    _TodoItem_GetTasks_Handler,
		},
		{
			MethodName: "UpdateTaskStatus",
			Handler:    _TodoItem_UpdateTaskStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/service_gRPC.proto",
}
